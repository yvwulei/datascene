<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	<display-name>Archetype Created Web Application</display-name>
	
	<!-- 
	classpath：只会到你的class路径中查找找文件;
	classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找. 
	-->
	<!-- 配置Spring 配置文件名称和路径 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath*:applicationContext.xml,
            classpath*:applicationContext-shiro.xml,
            <!-- classpath*:applicationContext-es.xml
            classpath*:applicationContext-quartz.xml -->
        </param-value>
    </context-param>
    
   	<!-- 启动IOC容器 配置Spring上下文监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
	<!-- 配置log4j配置文件路径 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>
    
    <!-- 60s 检测日志配置 文件变化 -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>60000</param-value>
    </context-param>

    <!-- 配置Log4j监听器 -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    
    <!-- 防止Spring内存溢出监听器 -->
    <!-- 防止发生java.beans.Introspector内存泄露,应将它配置在ContextLoaderListener的前面 -->  
    <!-- 详细描述见http://blog.csdn.net/jadyer/article/details/11991457 -->  
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	
	<!-- 程序Session配置 -->  
    <session-config>  
        <!-- Session过期时间(单位：分) -->  
        <session-timeout>30</session-timeout>  
    </session-config>  
      
    <!-- 激活Tomcat的defaultServlet来处理静态文件 -->  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.jpg</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.gif</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.png</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.js</url-pattern>  
    </servlet-mapping>  
    <servlet-mapping>  
        <servlet-name>default</servlet-name>  
        <url-pattern>*.css</url-pattern>  
    </servlet-mapping>  
    
	<!-- 解决乱码问题 -->  
    <!-- 配置Spring字符编码过滤器 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- Shiro配置 -->
    <!-- 配置Shiro过滤器,先让Shiro过滤系统接收到的请求 -->  
    <!-- 这里filter-name必须对应applicationContext.xml中定义的<bean id="shiroFilter"/> -->  
    <!-- 使用[/*]匹配所有请求,保证所有的可控请求都经过Shiro的过滤 -->  
    <!-- 通常会将此filter-mapping放置到最前面(即其他filter-mapping前面),以保证它是过滤器链中第一个起作用的 -->  
    <filter>
	  <filter-name>shiroFilter</filter-name>
	  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	  <async-supported>true</async-supported>
	  <init-param>
	  	<!-- 该值缺省为false,表示生命周期由SpringApplicationContext管理,设置为true则表示由ServletContainer管理 -->  
	    <param-name>targetFilterLifecycle</param-name>
	    <param-value>true</param-value>
	  </init-param>
	</filter>
	<filter-mapping>
	  <filter-name>shiroFilter</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>
  
    <!-- spring-orm-hibernate4的OpenSessionInViewFilter -->  
	<filter>  
	  <filter-name>opensessioninview</filter-name>  
	  <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>  
	</filter>  
	<filter-mapping>  
	  <filter-name>opensessioninview</filter-name>  
	  <url-pattern>/*</url-pattern>  
	</filter-mapping>  
  
	<!-- Spring MVC servlet -->
	<servlet>
		<servlet-name>springmvc</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
	      <param-name>contextConfigLocation</param-name>
	      <param-value>
	      	  classpath*:applicationContext-mvc.xml
	      </param-value>
	    </init-param>
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>springmvc</servlet-name>
		<!-- 此处可以可以配置成*.do，对应struts的后缀习惯 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>initServlet</servlet-name>
		<servlet-class>com.zhongtian.datascene.sys.init.InitServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
    <error-page> 
	    <error-code>403</error-code> 
	    <location>/views/error/403.jsp</location> 
	</error-page>
	<error-page> 
	    <error-code>404</error-code> 
	    <location>/views/error/404.jsp</location> 
	</error-page> 
	<error-page>  
        <error-code>405</error-code>  
        <location>/views/error/405.jsp</location>  
    </error-page>  
    <error-page>  
        <error-code>500</error-code>  
        <location>/views/error/500.jsp</location>  
    </error-page> 
	<welcome-file-list>
		<welcome-file>/index.jsp</welcome-file>
	</welcome-file-list>
   
</web-app>  